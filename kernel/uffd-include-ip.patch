From 4fa3bf54f2760ce4c1a51168a87f199f68a11382 Mon Sep 17 00:00:00 2001
From: Anil Yelam <yelama@vmware.com>
Date: Wed, 8 Jun 2022 15:25:14 -0700
Subject: [PATCH] Send more details for each fault to userspace (ip register
 and unmasked address)

Encapsulated ip info in one of the reserved fields in uffd_msg
---
 fs/userfaultfd.c                 | 13 ++++++++++---
 include/linux/mm.h               |  2 ++
 include/uapi/linux/userfaultfd.h |  5 ++---
 mm/hugetlb.c                     |  2 +-
 mm/khugepaged.c                  |  1 +
 mm/memory.c                      |  6 ++++--
 6 files changed, 20 insertions(+), 9 deletions(-)

diff --git a/fs/userfaultfd.c b/fs/userfaultfd.c
index 003f0d31743e..1a3c6a53f381 100644
--- a/fs/userfaultfd.c
+++ b/fs/userfaultfd.c
@@ -28,6 +28,7 @@
 #include <linux/ioctl.h>
 #include <linux/security.h>
 #include <linux/hugetlb.h>
+#include <linux/ptrace.h>
 
 int sysctl_unprivileged_userfaultfd __read_mostly;
 
@@ -192,7 +193,8 @@ static inline void msg_init(struct uffd_msg *msg)
 static inline struct uffd_msg userfault_msg(unsigned long address,
 					    unsigned int flags,
 					    unsigned long reason,
-					    unsigned int features)
+					    unsigned int features,
+						struct pt_regs* regs)
 {
 	struct uffd_msg msg;
 	msg_init(&msg);
@@ -215,6 +217,11 @@ static inline struct uffd_msg userfault_msg(unsigned long address,
 		msg.arg.pagefault.flags |= UFFD_PAGEFAULT_FLAG_MINOR;
 	if (features & UFFD_FEATURE_THREAD_ID)
 		msg.arg.pagefault.feat.ptid = task_pid_vnr(current);
+
+	/* writing ip register */
+	if (regs)
+		msg.ip = instruction_pointer(regs);
+
 	return msg;
 }
 
@@ -481,8 +488,8 @@ vm_fault_t handle_userfault(struct vm_fault *vmf, unsigned long reason)
 
 	init_waitqueue_func_entry(&uwq.wq, userfaultfd_wake_function);
 	uwq.wq.private = current;
-	uwq.msg = userfault_msg(vmf->address, vmf->flags, reason,
-			ctx->features);
+	uwq.msg = userfault_msg(vmf->unmasked_address, vmf->flags, reason, 
+				ctx->features, vmf->regs);
 	uwq.ctx = ctx;
 	uwq.waken = false;
 
diff --git a/include/linux/mm.h b/include/linux/mm.h
index 73a52aba448f..be1f8fe60603 100644
--- a/include/linux/mm.h
+++ b/include/linux/mm.h
@@ -534,6 +534,7 @@ struct vm_fault {
 		gfp_t gfp_mask;			/* gfp mask to be used for allocations */
 		pgoff_t pgoff;			/* Logical page offset based on vma */
 		unsigned long address;		/* Faulting virtual address */
+		unsigned long unmasked_address;	/* Faulting virtual address - unmasked */
 	};
 	enum fault_flag flags;		/* FAULT_FLAG_xxx flags
 					 * XXX: should really be 'const' */
@@ -571,6 +572,7 @@ struct vm_fault {
 					 * page table to avoid allocation from
 					 * atomic context.
 					 */
+	struct pt_regs* regs;
 };
 
 /* page entry size for vm->huge_fault() */
diff --git a/include/uapi/linux/userfaultfd.h b/include/uapi/linux/userfaultfd.h
index 05b31d60acf6..b450b1554f03 100644
--- a/include/uapi/linux/userfaultfd.h
+++ b/include/uapi/linux/userfaultfd.h
@@ -85,12 +85,11 @@
 				      struct uffdio_continue)
 
 /* read() structure */
-struct uffd_msg {
+struct uffd_msg  {
 	__u8	event;
 
 	__u8	reserved1;
-	__u16	reserved2;
-	__u32	reserved3;
+	__u64	ip:48;
 
 	union {
 		struct {
diff --git a/mm/hugetlb.c b/mm/hugetlb.c
index 95dc7b83381f..023247ae1248 100644
--- a/mm/hugetlb.c
+++ b/mm/hugetlb.c
@@ -4835,7 +4835,7 @@ static inline vm_fault_t hugetlb_handle_userfault(struct vm_area_struct *vma,
 		.vma = vma,
 		.address = haddr,
 		.flags = flags,
-
+		.regs = NULL
 		/*
 		 * Hard to debug if it ends up being
 		 * used by a callee that assumes
diff --git a/mm/khugepaged.c b/mm/khugepaged.c
index 045cc579f724..ab8249226142 100644
--- a/mm/khugepaged.c
+++ b/mm/khugepaged.c
@@ -1014,6 +1014,7 @@ static bool __collapse_huge_page_swapin(struct mm_struct *mm,
 			.pgoff = linear_page_index(vma, haddr),
 			.flags = FAULT_FLAG_ALLOW_RETRY,
 			.pmd = pmd,
+			.regs = NULL,
 		};
 
 		vmf.pte = pte_offset_map(pmd, address);
diff --git a/mm/memory.c b/mm/memory.c
index 25fc46e87214..1488f1669565 100644
--- a/mm/memory.c
+++ b/mm/memory.c
@@ -4605,14 +4605,16 @@ static vm_fault_t handle_pte_fault(struct vm_fault *vmf)
  * return value.  See filemap_fault() and __lock_page_or_retry().
  */
 static vm_fault_t __handle_mm_fault(struct vm_area_struct *vma,
-		unsigned long address, unsigned int flags)
+		unsigned long address, unsigned int flags, struct pt_regs* regs)
 {
 	struct vm_fault vmf = {
 		.vma = vma,
 		.address = address & PAGE_MASK,
+		.unmasked_address = address,
 		.flags = flags,
 		.pgoff = linear_page_index(vma, address),
 		.gfp_mask = __get_fault_gfp_mask(vma),
+		.regs = regs,
 	};
 	unsigned int dirty = flags & FAULT_FLAG_WRITE;
 	struct mm_struct *mm = vma->vm_mm;
@@ -4788,7 +4790,7 @@ vm_fault_t handle_mm_fault(struct vm_area_struct *vma, unsigned long address,
 	if (unlikely(is_vm_hugetlb_page(vma)))
 		ret = hugetlb_fault(vma->vm_mm, vma, address, flags);
 	else
-		ret = __handle_mm_fault(vma, address, flags);
+		ret = __handle_mm_fault(vma, address, flags, regs);
 
 	if (flags & FAULT_FLAG_USER) {
 		mem_cgroup_exit_user_fault();
-- 
2.25.1

